import telebot
from mistralai.client import MistralClient
from telebot import types
import os
import redis
import hashlib
import json
# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
print("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫")
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
REDIS_HOST = os.getenv("REDIS_HOST", "redis-18492.c259.us-central1-2.gce.redns.redis-cloud.com")
REDIS_PORT = int(os.getenv("REDIS_PORT", 18492))
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_TOKEN:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: TELEGRAM_TOKEN –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")

if not MISTRAL_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: MISTRAL_API_KEY –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway.")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
try:
    redis_client = redis.StrictRedis(
        host=REDIS_HOST,
        port=REDIS_PORT,
        password=REDIS_PASSWORD,
        decode_responses=True
    )
    redis_client.ping()
    print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Redis")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis: {e}")
    redis_client = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ Mistral AI
bot = telebot.TeleBot(TELEGRAM_TOKEN)
mistral_client = MistralClient(api_key=MISTRAL_API_KEY)

# –§—É–Ω–∫—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –≤ Redis
def get_cached_response(query: str):
    if redis_client:
        query_hash = hashlib.sha256(query.encode()).hexdigest()
        cached_response = redis_client.get(query_hash)
        if cached_response:
            return json.loads(cached_response)["response"]
    return None

def cache_response(query: str, response: str):
    if redis_client:
        query_hash = hashlib.sha256(query.encode()).hexdigest()
        redis_client.setex(query_hash, 3600, json.dumps({"response": response}))  # –ö–µ—à –Ω–∞ 1 —á–∞—Å

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üí∞ –£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å", "üí≥ –ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç", "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã", "üó£ –ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å"]
    markup.add(*[types.KeyboardButton(btn) for btn in buttons])

    welcome_text = """
    üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –±–∞–Ω–∫–µ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ! üòä
    üì≤ –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç.
    """
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text.strip()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        cached_response = get_cached_response(user_text)
        if cached_response:
            bot.reply_to(message, cached_response)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Mistral AI
        print(f"üîπ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Mistral AI: {user_text}")

        ai_response = mistral_client.chat(
            model="mistral-tiny",
            messages=[{"role": "user", "content": user_text}]
        )
        
        bot_response = ai_response.choices[0].message.content.strip()
        print(f"üîπ –û—Ç–≤–µ—Ç –æ—Ç Mistral: {bot_response}")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∫–µ—à
        cache_response(user_text, bot_response)

        bot.reply_to(message, bot_response)

    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)

