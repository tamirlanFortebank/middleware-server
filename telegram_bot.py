import telebot
from mistralai.client import MistralClient
from telebot import types
import os
import redis

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å Railway)
REDIS_HOST = os.getenv("REDIS_HOST")
REDIS_PORT = os.getenv("REDIS_PORT", 6379)
REDIS_PASSWORD = os.getenv("REDIS_PASSWORD", None)

redis_client = redis.StrictRedis(
    host=REDIS_HOST,
    port=int(REDIS_PORT),
    password=REDIS_PASSWORD,
    decode_responses=True
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ Mistral
bot = telebot.TeleBot(TELEGRAM_TOKEN)
mistral_client = MistralClient(api_key=MISTRAL_API_KEY)

import telebot
from mistralai.client import MistralClient
from telebot import types
import os
import redis
import hashlib
import json
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
REDIS_HOST = os.getenv("REDIS_HOST", "localhost")  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Redis
REDIS_PORT = os.getenv("REDIS_PORT", 6379)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram-–±–æ—Ç–∞ –∏ Mistral –∫–ª–∏–µ–Ω—Ç–∞
bot = telebot.TeleBot(TELEGRAM_TOKEN)
mistral_client = MistralClient(api_key=MISTRAL_API_KEY)
redis_client = redis.StrictRedis(host=REDIS_HOST, port=REDIS_PORT, db=0)

# –§—É–Ω–∫—Ü–∏—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Redis
def get_cached_response(query: str):
    query_hash = hashlib.sha256(query.encode()).hexdigest()  # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
    cached_response = redis_client.get(query_hash)  # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç –≤ –∫–µ—à–µ
    if cached_response:
        return json.loads(cached_response)  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–∑ JSON
    return None

def cache_response(query: str, response: str):
    query_hash = hashlib.sha256(query.encode()).hexdigest()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
    redis_client.setex(query_hash, 3600, json.dumps(response))  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à–µ –Ω–∞ 1 —á–∞—Å

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–£–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å")
    item2 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∫—Ä–µ–¥–∏—Ç")
    item3 = types.KeyboardButton("–ü–æ—Ç–µ—Ä—è –∫–∞—Ä—Ç—ã / –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã")
    item4 = types.KeyboardButton("–ü—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å")
    markup.add(item1, item2, item3, item4)

    welcome_text = """
    –ü—Ä–∏–≤–µ—Ç! –Ø AI-–±–æ—Ç, –∏ —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –æ –±–∞–Ω–∫–µ. üòä
    üì≤ –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ –ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç. 
    –ï—Å–ª–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –Ω–∏–∂–µ:
    """

    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_text = message.text.lower()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        bank_keywords = ["–±–∞–ª–∞–Ω—Å", "–∫—Ä–µ–¥–∏—Ç", "–∫–∞—Ä—Ç–∞", "–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞"]
        if any(word in user_text for word in bank_keywords):
            bot_response = "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–∞–Ω–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            cached_response = get_cached_response(user_text)
            if cached_response:
                bot_response = cached_response['response']
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Mistral API
                ai_response = mistral_client.chat(
                    model="mistral-tiny",
                    messages=[{"role": "user", "content": user_text}]
                )
                bot_response = ai_response.choices[0].message.content

                # –ö–µ—à–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ 1 —á–∞—Å
                cache_response(user_text, {"response": bot_response})

        bot.reply_to(message, bot_response)

    except Exception as e:
        bot.reply_to(message, "–û—à–∏–±–∫–∞! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. üò¢")
        print(e)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.polling(none_stop=True)
